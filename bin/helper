#!usr/bin/env bash

# set -ex

toggle_layout ()
{
  LAYOUT=$(yabai -m query --spaces --space | jq .type)
 
  if [[ $LAYOUT =~ "bsp" ]]; then 
    yabai -m space --layout stack 
  elif [[ $LAYOUT =~ "stack" ]]; then 
    yabai -m space --layout float 
  elif [[ $LAYOUT =~ "float" ]]; then 
    yabai -m space --layout bsp 
  fi
}

opacity_up ()
{
  OPACITY=$(yabai -m query --windows --window | jq .opacity)
  if [[ $OPACITY -eq 1.0 ]]; then
    yabai -m window --opacity 0.1
  else
    OPACITY=$(echo $OPACITY + 0.1 | bc)
    yabai -m window --opacity $OPACITY
  fi
}

opacity_down ()
{
  OPACITY=$(yabai -m query --windows --window | jq .opacity)
  if [[ $OPACITY -eq 0.1 ]]; then
    yabai -m window --opacity 1.0
  else
    OPACITY=$(echo $OPACITY - 0.1 | bc)
    yabai -m window --opacity $OPACITY
  fi
}

close_window () 
{
  FULLSCREEN=$(yabai -m query --windows --window | jq '."is-native-fullscreen"')
  APP=$(yabai -m query --windows --window | jq -r '."app"')
  skhd -k "escape"; 
  if [[ $FULLSCREEN = "true" ]]; then
    # osascript -l JavaScript -e 'Application("System Events").keystroke("w",{using: ["command down", "shift down"]})'
    
    if [[ $APP = "Firefox" ]]; then
      hs -A -c "closeWindow()"
    fi
  else
    skhd -k "shift + cmd - w"
    # yabai -m window --close
  fi
}

toggle_border ()
{
  BORDER=$(yabai -m config window_border)
  if [[ $BORDER = "on" ]]; then
    yabai -m config window_border off
  elif [[ $BORDER = "off" ]]; then
    yabai -m config window_border on
  fi
  yabai -m config window_border
}

increase_gaps ()
{
  GAP=$(yabai -m config window_gap)
  yabai -m config window_gap $(echo $GAP + 1| bc)
}

decrease_gaps ()
{
  GAP=$(yabai -m config window_gap)
  yabai -m config window_gap $(echo $GAP - 1| bc)
}

increase_padding_top ()
{
  PADDING=$(yabai -m config top_padding)
  yabai -m config top_padding $(echo $PADDING + 1| bc)
}

increase_padding_bottom ()
{
  PADDING=$(yabai -m config bottom_padding)
  yabai -m config bottom_padding $(echo $PADDING + 1| bc)
}

increase_padding_left ()
{
  PADDING=$(yabai -m config left_padding)
  yabai -m config left_padding $(echo $PADDING + 1| bc)
}

increase_padding_right ()
{
  PADDING=$(yabai -m config right_padding)
  yabai -m config right_padding $(echo $PADDING + 1| bc)
}

increase_padding_all ()
{
  PADDING_TOP=$(yabai -m config top_padding)
  PADDING_BOTTOM=$(yabai -m config bottom_padding)
  PADDING_LEFT=$(yabai -m config left_padding)
  PADDING_RIGHT=$(yabai -m config right_padding)

  yabai -m config top_padding $(echo $PADDING_TOP + 1| bc)
  yabai -m config bottom_padding $(echo $PADDING_BOTTOM + 1| bc)
  yabai -m config left_padding $(echo $PADDING_LEFT + 1| bc)
  yabai -m config right_padding $(echo $PADDING_RIGHT + 1| bc)
}

decrease_padding_top ()
{
  PADDING=$(yabai -m config top_padding)
  yabai -m config top_padding $(echo $PADDING - 1| bc)
}

decrease_padding_bottom ()
{
  PADDING=$(yabai -m config bottom_padding)
  yabai -m config bottom_padding $(echo $PADDING - 1| bc)
}

decrease_padding_left ()
{
  PADDING=$(yabai -m config left_padding)
  yabai -m config left_padding $(echo $PADDING - 1| bc)
}

decrease_padding_right ()
{
  PADDING=$(yabai -m config right_padding)
  yabai -m config right_padding $(echo $PADDING - 1| bc)
}

decrease_padding_all ()
{
  PADDING_TOP=$(yabai -m config top_padding)
  PADDING_BOTTOM=$(yabai -m config bottom_padding)
  PADDING_LEFT=$(yabai -m config left_padding)
  PADDING_RIGHT=$(yabai -m config right_padding)

  yabai -m config top_padding $(echo $PADDING_TOP - 1| bc)
  yabai -m config bottom_padding $(echo $PADDING_BOTTOM - 1| bc)
  yabai -m config left_padding $(echo $PADDING_LEFT - 1| bc)
  yabai -m config right_padding $(echo $PADDING_RIGHT - 1| bc)
}

new_window ()
{
  APP_TO_OPEN="$1"
  CURRENT_APP=$(yabai -m query --windows --window | jq -r '.app')

  click_menu_bar ()
  {
    osascript -e 'tell application "System Events"' \
      -e "tell application process \"$APP_TO_OPEN\"" \
      -e "tell menu 1 of menu bar item 3 of menu bar 1" \
      -e "click (first menu item whose value of attribute \"AXMenuItemCmdChar\" is \"N\" and value of attribute \"AXMenuItemCmdModifiers\" is $1)" \
      -e 'end tell' \
      -e 'end tell' \
      -e 'end tell'
  }

  if [[ $CURRENT_APP = $APP_TO_OPEN ]]; then
    
    if [[ $2 = "stack" ]]; then
      yabai -m window --insert stack
    fi

    if [[ $APP_TO_STACK = "Code" ]]; then
      click_menu_bar 1
    else
      click_menu_bar 0
    fi
  fi
}

create_spaces ()
{
  SPACES=$(yabai -m query --spaces | jq -r '.[]."index"' | tail -n 1)

  if [[ $SPACES -lt 5 ]]; then
    NUM_SPACES_TO_CREATE=$(echo 5 - $SPACES| bc)
    
    for i in {1..$NUM_SPACES_TO_CREATE}; do
      yabai -m space --create 
    done

  fi
}

set_wallpaper () {
  # TODO: Add flag to set all spaces to same wallpaper
  # TODO: Set the name of the terminal and center and float it in yabai rules
  # TODO: Bind key to set color scheme
  # TODO: Bind key to show desktop
  skhd -k 'escape'
  yabai -m space --toggle show-desktop
  TOTAL_SPACES=$(yabai -m query --spaces | jq '.[].id' | wc -l)
  CURRENT_SPACE=$(yabai -m query --spaces --space | jq -r ."index")
  SCRIPT="
    [[ $CURRENT_SPACE -ne 1 ]] && yabai -m --space focus 1 || : 
    /bin/ls $1 | 
      fzf --multi $TOTAL_SPACES --reverse --height 100% --bind 'ctrl-w:execute-silent:(wallpaper set $1{})' \
      --preview 'timg -g 80x40 --auto-crop $1{}' |
    xargs -I {} sh -c 'wallpaper set $1{}; yabai -m space --focus next;'; yabai -m space --focus $CURRENT_SPACE;   yabai -m space --toggle show-desktop;exit;
  "
  osascript -e '
    on run argv
      tell application "iTerm"
        activate
        set newWindow to (create window with profile "Float")
        tell current session of newWindow
          write text "" & item 1 of argv
        end tell
      end tell
    end run
  ' $SCRIPT

}

get_pixel_color () {

  # Use hammer spoon to get mouse x,y coords
  X=$(hs -A -c "hs.mouse.absolutePosition()['x']") 
  Y=$(hs -A -c "hs.mouse.absolutePosition()['y']")

  # Screenshot pixel at mouse coords save to $TMPDIR
  # HEX Dump and grab color 
  # NOTE: This will require security and privacy permissions to capture the screen
    # Running against known hexs will not reproduce the same hex though will
    # produce the same color for all intents and purposes. Generally a single 
    # Color R G or B will be 1 digit less than the actual.

  COLOR=$(
    screencapture -R $X,$Y,1,1 -t bmp $TMPDIR/pixel_color.bmp
    xxd -p -l 3 -s 54 $TMPDIR/pixel_color.bmp | 
    sed 's/\(..\)\(..\)\(..\)/\3\2\1/'
  )
  
  # Copy Color to Clipboard
  echo "#$COLOR" | pbcopy

  # Use applescript to display a native OS notification 
  # TODO: This could be improved with imagemagick and hammerspoon 
  osascript -e '
    on run argv
      display notification "#" & item 1 of argv
    end run
  ' $COLOR
}


